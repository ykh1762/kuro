package kr.or.ddit.main.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.collections.map.HashedMap;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.google.gson.JsonObject;

import kr.or.ddit.attfile.vo.AttFileVO;
import kr.or.ddit.dep.vo.DepVO;
import kr.or.ddit.employee.vo.EmployeeVO;
import kr.or.ddit.main.service.ILoginService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/conn")
public class LoginController {

	@Inject
	private ILoginService loginService;
	
	@GetMapping("/login")
	public String login() {
		
		return "main/login";
	}
	
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(HttpServletRequest req, EmployeeVO empVO, Model model) {
		
		// 임시 로그인 체크
//		log.info("no, pw >> " + empVO.getEmpNo()+", "+empVO.getEmpPw());
		empVO = loginService.loginCheck(empVO);
		
		if (empVO != null) {
			
			HttpSession session = req.getSession();
			
			// erd 수정 - 먼저 이전 데이터 먼저 바뀐 컬럼에 맞게 넣기
			AttFileVO profile = loginService.getAf(empVO.getEmpNo());
			session.setAttribute("profile", profile);			
			
			// 부서명
			DepVO depVO = loginService.getDep(empVO.getDepCode());
			session.setAttribute("depVO", depVO);
			
			session.setAttribute("SessionInfo", empVO);	
			
			// 조직도 데이터 (일단은 로그인 해야 보이는 걸로)
			List<DepVO> depList = loginService.getDepList();
			List<EmployeeVO> empList = loginService.getEmpList();
			
			List<String> treeJson = new ArrayList<String>();
			
			for (DepVO dVO : depList) {
				Map<String, String> tempMap = new HashMap<String, String>();
				
				tempMap.put("id", dVO.getDepCode());
				
				// 상위부서가 없는 경우(DEP1) #으로 입력
				if (dVO.getDepParcode() == null) {
					
					tempMap.put("parent", "#");
				}else {
					tempMap.put("parent", dVO.getDepParcode());
				}
				tempMap.put("text", dVO.getDepName());
				
				
//				log.info("json map >> " + new JSONObject(tempMap));
				// map을 json으로 변환
				treeJson.add(new JSONObject(tempMap).toString());
			}
			
			// emp id를 만들기 위한 map
			Map<String, Integer> idMap = new HashMap<String, Integer>();
			
			for (EmployeeVO eVO : empList) {
				Map<String, String> tempMap = new HashMap<String, String>();
				
				
				if (idMap.get(eVO.getDepCode()) == null) {
					idMap.put(eVO.getDepCode(), 1);
				}else {
					idMap.put(eVO.getDepCode(), ((int) idMap.get(eVO.getDepCode()))+1);
				}
				
				tempMap.put("id", eVO.getDepCode() + idMap.get(eVO.getDepCode()));
				tempMap.put("parent", eVO.getDepCode());
				tempMap.put("text", eVO.getEmpName()+" "+eVO.getEmpPos());
				tempMap.put("empNo", eVO.getEmpNo());
				treeJson.add(new JSONObject(tempMap).toString());
			}
			
			session.setAttribute("treeJson", treeJson);
			session.setAttribute("empList", empList);
			
			return "main/home";
		}
		
		model.addAttribute("msg", "로그인 정보를 확인해주세요.");
		return "conn/login";
	}

	@GetMapping("/logout")
	public String logout(HttpServletRequest req) {
		
		HttpSession session = req.getSession();
		session.invalidate();
		
		return "conn/login";
	}
	
	
	
	
	
	
	
}

