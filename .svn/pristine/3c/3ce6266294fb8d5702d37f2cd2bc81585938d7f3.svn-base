<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.mapper.MailMapper">

	<select id="getMailList" parameterType="string" resultType="mailVO">
		select
			MAIL_CODE, EMP_NO, MAIL_TITLE, MAIL_CONTENT, MAIL_IMP, MAIL_SAVE, MAIL_DATE, MAIL_SEND
		from mail	
	</select>
	
	<!-- 메일 작성하기 -->
	<insert id="write" parameterType="mailVO" useGeneratedKeys="true">
		INSERT INTO MAILREC (
			emp_no, MAIL_CODE, mr_date, mr_type		
		) VALUES (
			#{empNo}, #{mailCode}, SYSDATE, 'N'
		)
	</insert>
	
	<!-- 임시저장 메일 작성 -->
	<insert id="outboxMail" parameterType="mailVO" useGeneratedKeys="true">
		INSERT INTO mail (
			MAIL_CODE, EMP_NO, MAIL_TITLE, MAIL_CONTENT, MAIL_SAVE, MAIL_DATE
		) VALUES (
			(SELECT 'MAIL' || TRIM((NVL(MAX(TO_NUMBER(SUBSTR(MAIL_CODE,5))),0) + 1)) FROM MAIL)
			, #{empNo}, #{mailTitle}, #{mailContent}, 'Y' , SYSDATE
		)	
	</insert>
	
	<!-- 보낸 쪽지함 목록 -->
	<select id="selectSendList" parameterType="string" resultType="mailVO">
		select
			m.MAIL_CODE, m.EMP_NO, m.MAIL_TITLE ,m.MAIL_CONTENT, m.MAIL_IMP, m.MAIL_SAVE, m.MAIL_DATE,
			(select EMP_NAME from EMPLOYEE where EMP_NO = mr.EMP_NO) as SEND_EMP_NO
		from MAIL m, MAILREC mr
		where m.emp_no = #{empNo} and m.MAIL_CODE = mr.MAIL_CODE(+) and m.MAIL_SAVE = 'N'
		order by m.MAIL_DATE desc	
	</select>
	
	<!-- 메일 발신 -->
	<insert id="sendMail" parameterType="mailVO" useGeneratedKeys="true">
		<selectKey keyProperty="mailCode" resultType="string" order="BEFORE">
			SELECT 'MAIL'||MAIL_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO mail (
				MAIL_CODE, EMP_NO, MAIL_TITLE, MAIL_CONTENT, MAIL_SAVE, MAIL_DATE
			) VALUES(
				#{mailCode}, #{empNo}, #{mailTitle}, #{mailContent}, 'N', SYSDATE
			)
	</insert>
	
	<select id="selectReceiveList" parameterType="string" resultType="mailVO">
		select
			m.mail_code, m.emp_no, mail_title, mail_content ,mail_Imp, mail_date, mail_save,
			e.emp_name
		from mailrec mr 
			left outer join mail m on(m.mail_code = mr.mail_code)
			left outer join employee e on(m.emp_no = e.emp_no)
		where mr.emp_no = #{empNo}			
	</select>
	
	<update id="updateMail" parameterType="mailRecVO">
		UPDATE MAILREC
		SET MR_TYPE = #{mrType}
		where MAIL_CODE = #{mailCode}
	</update>
	
	<select id="getMail" resultType="mailVO">
		select
		MAIL_CODE, EMP_NO, MAIL_TITLE, MAIL_CONTENT, MAIL_IMP, MAIL_DATE
		from mail
		where MAIL_CODE = #{mailCode}
	</select>
	
	<select id="getStoreList" resultType="mailVO">
		select
			m.MAIL_CODE, m.EMP_NO, m.MAIL_TITLE, m.MAIL_CONTENT, m.MAIL_DATE
		from mail m, mailrec mr
		where m.mail_code = mr.mail_code
		and mr.mr_type = 'Y'	
	</select>
	
	<select id="getOutboxList" parameterType="string" resultType="mailVO">
		select 
			MAIL_CODE, EMP_NO, MAIL_TITLE, MAIL_CONTENT, MAIL_SAVE, MAIL_DATE
		from mail
		where mail_save = 'Y'
	</select>
	
	<!-- 받은 메일 삭제 -->
	<delete id="deleteMail" parameterType="mailVO">
		delete
		from mail
		where MAIL_CODE = #{mailCode}
	</delete>
	
	<!-- 임시저장 detail -->
	<select id="getoutboxMail" resultType="mailVO">
		select
		MAIL_CODE, EMP_NO, MAIL_TiTLE, MAIL_CONTENT
		from mail
		where MAIL_CODE = #{mailCode}
	
	</select>

</mapper>






